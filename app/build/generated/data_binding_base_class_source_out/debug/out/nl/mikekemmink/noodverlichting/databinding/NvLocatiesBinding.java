// Generated by view binder compiler. Do not edit!
package nl.mikekemmink.noodverlichting.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.recyclerview.widget.RecyclerView;
import androidx.swiperefreshlayout.widget.SwipeRefreshLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.card.MaterialCardView;
import com.google.android.material.chip.Chip;
import com.google.android.material.chip.ChipGroup;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import nl.mikekemmink.noodverlichting.R;

public final class NvLocatiesBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final MaterialCardView cardFilters;

  @NonNull
  public final Chip chipAll;

  @NonNull
  public final Chip chipNoIssues;

  @NonNull
  public final Chip chipWithIssues;

  @NonNull
  public final ChipGroup chipsFilter;

  @NonNull
  public final LinearLayout emptyState;

  @NonNull
  public final RecyclerView recycler;

  @NonNull
  public final SwipeRefreshLayout swipeRefresh;

  private NvLocatiesBinding(@NonNull LinearLayout rootView, @NonNull MaterialCardView cardFilters,
      @NonNull Chip chipAll, @NonNull Chip chipNoIssues, @NonNull Chip chipWithIssues,
      @NonNull ChipGroup chipsFilter, @NonNull LinearLayout emptyState,
      @NonNull RecyclerView recycler, @NonNull SwipeRefreshLayout swipeRefresh) {
    this.rootView = rootView;
    this.cardFilters = cardFilters;
    this.chipAll = chipAll;
    this.chipNoIssues = chipNoIssues;
    this.chipWithIssues = chipWithIssues;
    this.chipsFilter = chipsFilter;
    this.emptyState = emptyState;
    this.recycler = recycler;
    this.swipeRefresh = swipeRefresh;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static NvLocatiesBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static NvLocatiesBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.nv_locaties, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static NvLocatiesBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.cardFilters;
      MaterialCardView cardFilters = ViewBindings.findChildViewById(rootView, id);
      if (cardFilters == null) {
        break missingId;
      }

      id = R.id.chipAll;
      Chip chipAll = ViewBindings.findChildViewById(rootView, id);
      if (chipAll == null) {
        break missingId;
      }

      id = R.id.chipNoIssues;
      Chip chipNoIssues = ViewBindings.findChildViewById(rootView, id);
      if (chipNoIssues == null) {
        break missingId;
      }

      id = R.id.chipWithIssues;
      Chip chipWithIssues = ViewBindings.findChildViewById(rootView, id);
      if (chipWithIssues == null) {
        break missingId;
      }

      id = R.id.chipsFilter;
      ChipGroup chipsFilter = ViewBindings.findChildViewById(rootView, id);
      if (chipsFilter == null) {
        break missingId;
      }

      id = R.id.emptyState;
      LinearLayout emptyState = ViewBindings.findChildViewById(rootView, id);
      if (emptyState == null) {
        break missingId;
      }

      id = R.id.recycler;
      RecyclerView recycler = ViewBindings.findChildViewById(rootView, id);
      if (recycler == null) {
        break missingId;
      }

      id = R.id.swipeRefresh;
      SwipeRefreshLayout swipeRefresh = ViewBindings.findChildViewById(rootView, id);
      if (swipeRefresh == null) {
        break missingId;
      }

      return new NvLocatiesBinding((LinearLayout) rootView, cardFilters, chipAll, chipNoIssues,
          chipWithIssues, chipsFilter, emptyState, recycler, swipeRefresh);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
